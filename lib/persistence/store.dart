import 'dart:convert';

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:localstorage/localstorage.dart';

import '../qrcodes/model.dart';

class SecureStore extends Store {
  final storage = const FlutterSecureStorage();

  @override
  Future<void> load() async {
    var json = await storage.read(key: "list");
    if (json == null) {
      await save();
      return;
    }
    items.clear();
    jsonDecode(json).forEach((item) {
      items.add(QrCode.fromJson(item));
    });
  }

  @override
  Future<bool> get ready async {
    await load();
    return true;
  }

  @override
  Future<void> save() async {
    return storage.write(key: "list", value: jsonEncode(items));
  }
}

class LocalStore extends Store {
  final String name;
  late LocalStorage storage;

  LocalStore(this.name) : super();

  @override
  Future<bool> get ready async {
    storage = LocalStorage(name);
    if (await storage.ready) {
      await load();
      return true;
    }
    return false;
  }

  @override
  Future<void> save() async {
    return storage.setItem("list", jsonEncode(items));
  }

  @override
  Future<void> load() async {
    var json = await storage.getItem("list");
    if (json == null) {
      await save();
      return;
    }
    items.clear();
    jsonDecode(json).forEach((item) {
      items.add(QrCode.fromJson(item));
    });
  }
}

abstract class Store {
  List<QrCode> items = [];

  Store();

  Future<bool> get ready;

  Future<void> save();

  Future<void> load();

  int get length {
    return items.length;
  }

  Future<bool> add(QrCode qr) async {
    items.add(qr);
    await save();
    return true;
  }

  Future<bool> remove(QrCode qr) async {
    var done = items.remove(qr);
    if (done) {
      await save();
      return true;
    }
    return false;
  }

  loadDefaultTestValuesIfEmpty() async {
    if (items.isNotEmpty) {
      return;
    }

    var testVector = [
      {
        "type": "eudcc",
        "qr":

        "image":
            "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",
        "color": 4294940672,
      },
      {
        "type": "eudcc",
        "qr":

      },
      {
        "type": "eudcc",
        "qr":
            "HC1:NCF 50.G0/3WUWGSLKH47GO0Y%5S.PK%96L78CKR7U*70YM8FN0GWC MCWY0/AC9%VD97TK0F90GECQHGWJC0FDL:4:KEPH7M/ESDD746KG7+59V*8H:6TL6657-R8RM8AL6W*8SX8457UW6QW6WJCT3EYM8XJCS.CNF6OF63W59%6%96XJC/\$ENF6OF64W5Y96UF6ZJC+KENF6OF63W59%6746%JC+QE\$.32%E6VCHQEU\$DE44NXOBJE719\$QE0/D+8D-ED.24-G8\$:84KCD3DX47B46IL6646I*6GVC*JC1A6G%63W56L6-96TPCBEC7ZKW.CI C14EPQE JC2/DB190%EMEDLPCG/DI CC1A NAMPCG/D%-C8C9:S9:B8O/EZKEZ967L6256V50N:HS3M*AUM.0R:3O Q-RBKL9PGCK+J1KV9W9KRB1:827NW0E5/0Q HL*M VI END26KPA-/NBSBXX1NCCKHN7+23478K5I9L.-72U06SJ/89PT9OGM1/0CZUU4JYNM/O39LK3.N1JQHU7+Z3SOP0/A3JUTKPVC73UTM%ECV1+CQSUT--8EJH4ZOM-N\$*SOC3-NB2GJJ-69YL 59V3G\$ 4%Y4Z6R.9PFWGP\$TGWHHK61N757O JJS 58DJ69984MEA41YGTXAB.CTPG-+RDHLVQBEWPFVK%L90+JCW1F30PL7ZOQ% QCRRPYJXYAA.M.*D HJ H985E\$4QA915SJEPQZ*J.6HATCDF16IARXM3FG0QE2N2C%7E%FXADONSY*R7S33IQ",
      },
    ];
    for (var element in testVector) {
      items.add(QrCode.fromJson(element));
    }
    await save();
  }
}
